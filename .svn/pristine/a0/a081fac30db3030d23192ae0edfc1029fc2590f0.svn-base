package com.jz.quoteoperation.user.controller;



import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.jz.quoteoperation.common.service.CommonService;
import com.jz.quoteoperation.common.util.CommonUtil;
import com.jz.quoteoperation.common.util.DateUtil;
import com.jz.quoteoperation.common.util.StringUtil;
import com.jz.quoteoperation.dept.po.DeptInfo;
import com.jz.quoteoperation.dept.po.DeptInfoExample;
import com.jz.quoteoperation.dept.service.DeptService;
import com.jz.quoteoperation.user.bo.UserDepartBO;
import com.jz.quoteoperation.user.bo.UserInfoBO;
import com.jz.quoteoperation.user.po.UserInfo;
import com.jz.quoteoperation.user.po.UserInfoExample;
import com.jz.quoteoperation.user.service.UserService;
import com.jz.quoteoperation.userdept.po.UserDept;
import com.jz.quoteoperation.userdept.service.UserDeptService;
import com.sun.org.apache.xpath.internal.operations.Mod;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/user")
public class UserController {

    @Autowired
    private UserService userService;

    @Autowired
    private DeptService deptService;

    @Autowired
    private UserDeptService userDeptService;

    @Autowired
    private CommonService commonService;




    /*@RequestMapping(value = "/queryUser1", method = RequestMethod.GET)
    public String findAllUser1( String userName, String password) {
        UserInfoExample example = new UserInfoExample();
        example.or().andUsrAcntEqualTo(userName).andUsrPwdEqualTo(StringUtil.md5(password));

        List<UserInfo> list = userService.selectByExample(example);

        Map map = new HashMap();
        Integer status = HttpServletResponse.SC_OK;
        String errorMsg = "";
        if(CommonUtil.isEmpty(list)){
            status = 0;
            errorMsg = "用户名或者密码错误";
        }else{
            String userStatus = list.get(0).getStatus();
            if(userStatus.equals("2") ){
                status = 0;
                errorMsg = "用户已停用";
            }else if(userStatus.equals("3")){
                status = 0;
                errorMsg = "用户已注销";
            }
        }

        map.put("status", status);
        map.put("errorMsg", errorMsg);
        String json = JSON.toJSONString(map);
        List<UserInfoBO> userInfoBOList = userService.queryUserAuth(list.get(0).getLgcSn());
        return json;
    }*/

    @RequestMapping(value = "/login",method = RequestMethod.GET)
    public String index() {

        return "/login.html";
    }

    @RequestMapping(value = "/toList")
    public String toList() {
        return "user/userList";
    }

    /**
     * 查询所有用户
     * @param model
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/queryAllUser")
    public String queryAllUSer(Model model){
       /* UserInfoExample example = new UserInfoExample();
        example.or();
        List<UserInfo> userList = userService.selectByExample(example);
        model.addAttribute("userList", userList);*/
        List<UserDepartBO> userList = userService.queryAllUser();
        String json = JSONArray.toJSONString(userList);
        return json;
    }

    /**
     * 根据用户id查询用户
     */
    @ResponseBody
    @RequestMapping(value = "/queryUserById", method = RequestMethod.POST)
    public UserInfo queryUserById(Integer lgcSn) {
        UserInfo userInfo = null;
        UserInfoExample example = new UserInfoExample();
        example.or().andLgcSnEqualTo(lgcSn);
        List<UserInfo> userList = userService.selectByExample(example);
        if (userList != null && userList.size() > 0) {
            userInfo = userList.get(0);
        }
        return userInfo;
    }

    /**
     * 根据关键字查询用户
     * @param keyword
     * @param status
     * @param model
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/queryUserByKeyword", method = RequestMethod.POST)
    public String queryUserByKeyword(String keyword,String status,Model model) {
        Map returnMap = new HashMap();
        Map<String, String> map = new HashMap<String,String>();
        map.put("keyword",keyword);
        map.put("status", status);
        List<UserDepartBO> userList = userService.selectUserByKeyword(map);
        String json = JSONArray.toJSONString(userList);
       /* model.addAttribute("userList", userList);
        model.addAttribute("keyword", keyword);
        model.addAttribute("status", status);*/

        return json;
    }

    /**\
     * 保存用户
     * @param useraccount
     * @param usermobile
     * @param username
     * @param status
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/saveUser", method = RequestMethod.POST)
    public Map saveUser(String departName,UserInfo userInfo) {
        Map<String, String> map = new HashMap<String,String>();

        int insert = userService.insertUserAndDept(userInfo, departName);
        if(insert>0){
            map.put("state", "true");
        }else{
            map.put("state", "false");
        }

        return map;
    }

    /**
     * 编辑用户
     * @param useraccount
     * @param usermobile
     * @param username
     * @param lgcSn
     * @param status
     * @param model
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/editUser",method = RequestMethod.POST)
    public Map editUser(String userMobile,String userName,Integer lgcSn,String status,String departName,String userEmail){
        Map<String, String> map = new HashMap<String,String>();
        UserInfo userInfo = new UserInfo();
        userInfo.setUsrMobi(userMobile);
        userInfo.setUsrNm(userName);
        userInfo.setStatus(status);
        userInfo.setLgcSn(lgcSn);
        userInfo.setUsrMail(userEmail);
        userInfo.setUpdDt(new Date());
        userInfo.setUpdUsrId(commonService.getCurrentUser().getLgcSn());
        userService.updateByPrimaryKey(userInfo);

        DeptInfoExample example = new DeptInfoExample();
        example.or().andDeptNmEqualTo(departName);
        List<DeptInfo> deptInfoList = deptService.selectByExample(example);
        //如果查询到的部门集合0，则说明在数据库中不存在此部门，则在部门表中插入此部门且将userID和departId更新到user_dept表中。
        //如果查询到的部门集合不为0 ，则说明在数据库中存在此部门。则只需要在user_dept中将部门和用户id进行更新
        if(deptInfoList.size()==0){
            DeptInfo deptInfo = new DeptInfo();
            deptInfo.setDeptNm(departName);
            deptInfo.setCrtDt(new Date());
            deptService.insert(deptInfo);

            UserDept userDept = new UserDept();
            userDept.setDeptSn(deptInfo.getLgcSn());
            userDept.setUsrSn(lgcSn);
            userDeptService.updateByUserLgcSn(userDept);
        }else{
            //deptService.updateByPrimaryKey(deptInfoList.get(0));
            UserDept userDept = new UserDept();
            userDept.setDeptSn(deptInfoList.get(0).getLgcSn());
            userDept.setUsrSn(lgcSn);
            userDeptService.updateByUserLgcSn(userDept);
        }
        /*UserInfo userInfo = userInfos.get(0);
        model.addAttribute("userInfo", userInfo);*/
        map.put("state", "true");
        return map;
    }

    /**
     * 删除用户
     */

    @ResponseBody
    @RequestMapping(value = "/deleteUser",method = RequestMethod.POST)
    public Map deleteUser(Integer lgcSn){
        Map<String, String> map = new HashMap<String,String>();
        UserInfoExample example = new UserInfoExample();
        example.or().andLgcSnEqualTo(lgcSn);
        userService.deleteByExample(example);
        map.put("state", "true");
        return map;
    }
}
